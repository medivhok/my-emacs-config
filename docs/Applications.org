#+TITLE: Applications
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle ../applications/init.el :mkdirp yes
#+OPTIONS: H:2 toc:nil

#+TOC: headlines:2

* Table of Contents  :noexport:
:PROPERTIES:
:TOC:      :include all :depth 2 :ignore (this)
:END:
:CONTENTS:
- [[#variables-definitions][Variables Definitions]]
- [[#the-one-to-rule-them-all][The One to Rule Them All]]
- [[#org-babel][Org Babel]]
- [[#org-enhancements][Org Enhancements]]
  - [[#lets-tangle-on-save][Let's Tangle On Save]]
  - [[#better-bullets][Better Bullets]]
  - [[#toc-auto-generation][TOC Auto Generation]]
  - [[#odt-exporter][ODT Exporter]]
  - [[#evil-keybindings][Evil Keybindings]]
- [[#bibliography][Bibliography]]
  - [[#helm-bibtex][helm-bibtex]]
  - [[#org-ref][org-ref]]
- [[#getting-things-done][Getting Things Done]]
  - [[#the-agenda][The Agenda]]
  - [[#agenda-entries][Agenda Entries]]
  - [[#entries-refiling][Entries Refiling]]
- [[#taking-smart-notes][Taking Smart Notes]]
  - [[#the-slip-box][The Slip Box]]
  - [[#org-roam-bibtex][org-roam-bibtex]]
  - [[#application-functions][Application Functions]]
- [[#you-need-a-budget][You Need A Budget]]
  - [[#ledger-mode][ledger-mode]]
  - [[#flycheck-ledger][flycheck-ledger]]
  - [[#evil-ledger][evil-ledger]]
- [[#statistics-with-r][Statistics With R]]
:END:

* Variables Definitions

#+NAME: medivhok:org-directory
#+BEGIN_SRC emacs-lisp
(defconst medivhok:org-directory
  (file-name-as-directory "~/org")
  "The root directory of the org ecosystem.")

(defconst medivhok:agenda-directory
  (file-name-as-directory
   (expand-file-name "agenda" medivhok:org-directory))
  "The directory of my agenda files.")

(defconst medivhok:pdf-directory
  (file-name-as-directory
   (expand-file-name "readings" medivhok:org-directory))
  "The directory of my pdf files.")

(defconst medivhok:roam-directory
  (file-name-as-directory
   (expand-file-name "roam" medivhok:org-directory))
  "The directory of my roam files.")

(defconst medivhok:bibtex-file
  (expand-file-name "zotero.bib" medivhok:pdf-directory)
  "My default bibliography file.")
#+END_SRC

[[https://orgmode.org][Org]] is a big and powerful ecosystem of [[https://https://www.gnu.org/software/emacs/][Emacs]] packages. I will configure
only the common functionalities and suggar for the eyes here. So let's
start with the ~use-package~ definition.

* The One to Rule Them All

#+begin_quote
Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system. -- [[https://orgmode.org/][org]]
#+end_quote

#+NAME: package:org
#+begin_src emacs-lisp
(use-package org
  :init
  (setq org-directory medivhok:org-directory)

  :hook
  (org-mode . org-indent-mode)
  (org-mode . variable-pitch-mode)
  (org-mode . visual-line-mode)

  :custom-face
  (org-block ((t (:inherit fixed-pitch))))
  (org-document-title ((t (:height 1.5 :weight light))))
  (org-level-1 ((t (:inherit outline-1 :height 1.3 :weight light))))
  (org-level-2 ((t (:inherit outline-2 :height 1.2 :weight light))))
  (org-level-3 ((t (:inherit outline-3 :height 1.1 :weight light))))
  (org-link ((t (:inherit link :underline nil :weight regular))))
  (org-meta-line ((t (:inherit fixed-pitch))))
  (org-table ((t (:inherit org-default :family "Roboto Mono"))))
  (org-table-header ((t (:inherit org-table :family "Roboto Mono"))))

  :general
  (medivhok:local-mode-menu 'normal
    org-mode-map
    nil '(:ignore t :which-key "org")
    "e" 'org-export-dispatch
    "t" '(:ignore t :which-key "toggle")
    "tl" 'org-toggle-link-display)

  :custom
  (org-fontify-quote-and-verse-blocks t)

  :config
  (setq org-agenda-files (list medivhok:agenda-directory)
        org-catch-invisible-edits 'show
        org-cycle-separator-lines 2
        org-directory medivhok:app-directory
        org-edit-src-content-indentation 0
        org-ellipsis " ▼"
        org-hide-block-startup nil
        org-hide-emphasis-markers t
        org-log-done 'time
        org-log-into-drawer t
        org-outline-path-complete-in-steps nil
        org-return-follows-link t
        org-src-fontify-natively t
        org-src-preserve-indentation nil
        org-src-tab-acts-natively t
        org-src-window-setup 'current-window
        org-startup-folded t)

  (setq org-format-latex-options
        (plist-put org-format-latex-options :scale 4.0))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (haskell . t)
     (ledger . t)
     (R . t)))

  (add-hook 'org-src-mode-hook
            (lambda ()
              (when (eq major-mode 'emacs-lisp-mode)
                (setq flycheck-disabled-checkers '(emacs-lisp-checkdoc)))))

  ;; Replace list hyphen with dot.
  (require 'org-indent)
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))
#+end_src

* Org Babel

#+BEGIN_SRC emacs-lisp
(use-package ob-core
  :defer t
  :straight org
  :custom
  (org-confirm-babel-evaluate nil))
#+END_SRC

* Org Enhancements
** Let's Tangle On Save

#+begin_comment
This /automatically tangle on save/ is a handy tip from [[https://leanpub.com/lit-config/read#leanpub-auto-configuring-emacs-and--org-mode-for-literate-programming][this book]] on literate
programming.
#+end_comment

#+begin_src emacs-lisp
(use-package ob-tangle
  :defer t

  :straight org

  :preface
  (defun medivhok/tangle-on-save ()
    "Disable confirmation before tangling."
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)))

  :hook
  (org-mode . (lambda ()
                (add-hook 'after-save-hook
        	                #'medivhok/tangle-on-save
                          'run-at-end
                          'only-in-org-mode))))
#+end_src

** Better Bullets

#+begin_quote
Make org-mode stars a little more super -- [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]]
#+end_quote

Use bullet characters instead of asterisks, plus set the header font sizes to
something more palatable.

#+begin_src emacs-lisp
(use-package org-superstar
  :after org

  :hook
  (org-mode . org-superstar-mode)

  :custom
  (org-superstar-remove-leading-stars t)
  (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** TOC Auto Generation

#+begin_quote
Automatic tables of contents for Org files. -- [[https://github.com/alphapapa/org-make-toc/][org-make-toc]]
#+end_quote

It’s nice to have a table of contents section for long literate configuration
files (like this one!) so I use [[https://github.com/alphapapa/org-make-toc][org-make-toc]] to automatically update the ToC in
any header with a property named TOC.

#+begin_src emacs-lisp
(use-package org-make-toc
  :hook
  (org-mode . org-make-toc-mode))
#+end_src

** ODT Exporter

#+begin_src emacs-lisp
(use-package ox-odt
  :after org

  :straight org

  :custom
  (org-odt-convert-process "unoconv")
  (org-odt-convert-processes '(("unoconv"
                                "unoconv -f %f %i")))
  (org-odt-preferred-output-format "docx")
  (org-odt-prettify-xml t)
  (org-odt-content-template-file (expand-file-name
                                  "OrgOdtContentTemplate.xml"
                                  (concat straight-base-dir
                                          "straight/repos/org/etc/styles/")))
  (org-odt-styles-file (expand-file-name
                        "OrgOdtStyles.xml"
                        (concat straight-base-dir
                                "straight/repos/org/etc/styles/"))))

  ;; :config
  ;; (org-odt-add-automatic-style "TNOrgTitle"
  ;;                             '(("style:family" "paragraph")
  ;;                               ("style:parent-style-name" "OrgTitle")
  ;;                               ("style:master-page-name" "OrgTitlePage"))))
#+end_src

** Evil Keybindings

#+begin_quote
Supplemental evil-mode keybindings to emacs org-mode. -- [[https://github.com/Somelauw/evil-org-mode/][evil-org]]
#+end_quote

#+begin_src emacs-lisp
(use-package evil-org
  :hook
  ((org-mode . evil-org-mode)
   (org-agenda-mode . evil-org-mode)
   (evil-org-mode . (lambda ()
	                    (evil-org-set-key-theme))))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

* Bibliography
** ~helm-bibtex~

#+NAME: package:helm-bibtex
#+BEGIN_SRC emacs-lisp
(use-package helm-bibtex
  :after (helm org)
  :init
  (setq bibtex-completion-bibliography medivhok:bibtex-file
        bibtex-completion-notes-path medivhok:roam-directory
        bibtex-completion-pdf-field "File"))
#+END_SRC

** ~org-ref~

#+NAME: package:org-ref
#+begin_src emacs-lisp
(use-package org-ref
  :after
  (org helm-bibtex)

  :init
  (setq org-ref-completion-library 'org-ref-helm-cite
        org-ref-default-bibliography (list medivhok:bibtex-file)))
#+end_src

* Getting Things Done

The environment of the /GTD/ workflow is done with ~org-agenda~, which is part of
the [[https://orgmode.org][Org Mode]] ecosystem.

#+begin_src emacs-lisp
(defun medivhok/open-agenda ()
  "Opens my GTD agenda."
  (interactive)
  (org-agenda nil " "))
#+end_src

** The Agenda

#+begin_src emacs-lisp
(use-package org-agenda
  :defer t

  :after (org)

  :straight org

  :init
  (defconst medivhok:gtd-file
    (expand-file-name "gtd.org" medivhok:agenda-directory)
    "My 'getting things done' agenda file.")

  :custom
  (org-agenda-window-setup 'current-window)
  (org-agenda-block-separator nil)
  (org-agenda-dim-blocked-tasks 'invisible)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-start-with-log-mode t)
  (org-agenda-custom-commands
   `((" "
      "GTD Agenda"
      ((agenda ""
	             ((org-agenda-span 'week)
	              (org-deadline-warning-days 14)))
       (tags-todo "@inbox"
		              ((org-agenda-overriding-header "Inbox")))
       (tags-todo "@tâches"
		              ((org-agenda-overriding-header "Tâches")))
       (tags-todo "@teluq"
		              ((org-agenda-overriding-header "Teluq")))
       (tags-todo "@projets"
		              ((org-agenda-overriding-header "Projets"))))))))
#+end_src

** Agenda Entries

#+begin_src emacs-lisp
(use-package org-capture
  :straight org

  :commands (org-capture)
  :bind
  (("<f4>" . (lambda () (interactive) (org-capture nil "i"))))

  :config
  (setq org-capture-templates
	`(("i" "inbox" entry
	   (file+headline ,medivhok:gtd-file "Inbox")
	   "* TODO [#C] %?\n:PROPERTIES:\n:Effort: 1\n:END:\n")

	  ("e" "email" entry
	   (file+headline ,medivhok:gtd-file "Emails")
	   "* TODO [#A] Reply: %a"
	   :immediate-finish t))))
#+end_src

** Entries Refiling

#+begin_src emacs-lisp
(use-package org-refile
  :straight org

  :config
  (setq org-refile-allow-creating-parent-nodes 'confirm
	      org-refile-use-outline-path 'file
	      org-refile-targets '((nil :tag . "@tâches")
	                     	   (nil :tag . "@cours")
				   (nil :tag . "@projet")
				   (nil :tag . "@teluq"))))
#+end_src

* Taking Smart Notes

I use the [[https://en.wikipedia.org/wiki/Zettelkasten][zettelkasten]] (slip box) method for my note-taking workflow. The
book [[https://www.goodreads.com/book/show/34507927-how-to-take-smart-notes][How to Take Smart Notes]] is the referrence on the subject and I use
[[https://www.orgroam.com][org-roam]] to emulate my slip box.

** The Slip Box
:PROPERTIES:
:package-name: org-roam
:package-url: https://www.orgroam.com
:END:

#+begin_src emacs-lisp :noweb no-export
(use-package org-roam
  :after
  (org helm)

  :straight
  (org-roam :host github :repo "org-roam/org-roam")

  :hook
  (after-init . org-roam-mode)

  :commands
  (org-roam-db-query)

  :general
  (medivhok:notes-menu
    :states 'normal
    "f" 'org-roam-find-file
    "G" 'org-roam-graph
    "i" 'org-roam-insert
    "r" 'org-roam-buffer-toggle-display)

  :init
  (defconst medivhok:roam-templates-directory
    (file-name-as-directory
     (expand-file-name "templates" medivhok:roam-directory))
    "The slip box cards templates directory.")

  (setq org-roam-completion-system 'helm
        org-roam-directory medivhok:roam-directory
        org-roam-file-exclude-regexp "setupfiles\\|templates"
        org-roam-index-file "index_file.org"
        org-roam-tag-sources '(prop)
        org-roam-title-sources '(title alias)
        org-roam-capture-templates
        `(("n" "note card" plain
           (function org-roam--capture-get-point)
           "%?"
           :file-name "%<%Y%m%d%H%M%S>-${slug}"
           :head "#+TITLE: ${title}
,#+CREATED: %T
,#+LAST_MODIFIED: %T

- tags ::"
           :unnarrowed t))

        org-roam-ref-capture-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "%<%Y%m%d%H%M%S>-${slug}"
           :head "#+TITLE: ${title}\n#+ROAM_KEY: ${ref}\n- source :: ${ref}"
           :unnarrowed t)))

  (setq time-stamp-active t
        time-stamp-pattern "-10/^#\\+LAST_MODIFIED: <%Y-%02m-%02d %a %02H:%02M>$"
        time-stamp-format "%Y-%02m-%02d %a %02H:%02M")

  (defun medivhok/sanitize-roam-tags (item &optional item-list)
    (let ((current-list (or item-list (list))))
      (if (stringp item)
          (unless (member item current-list)
            (push item current-list))
        (dolist (current-item item)
          (setq current-list (medivhok/sanitize-roam-tags current-item current-list))))
      current-list))

  (defun medivhok/get-roam-tags ()
    "Return a list of the tags in my roam files."
    (medivhok/sanitize-roam-tags (org-roam-db-query [:select tags :from tags])))

  (defun medivhok/get-roam-tag-alist ()
    (let ((tag-list (medivhok/get-roam-tags))
          (tag-alist))
      (dolist (tag tag-list tag-alist)
        (push (cons tag nil) tag-alist))))

  (defun medivhok/select-roam-tags ()
    "Return a list of selected tags."
    (let ((available-tag-list (medivhok/get-roam-tags))
          (selected-tag-list)
          (selected-tag)
          (done-selection "[done]")
          (finished nil))
      (add-to-list 'available-tag-list done-selection)
      (while (not finished)
        (let ((selected-tag
               (completing-read
                (format "Tags %s: " (or selected-tag-list ""))
                available-tag-list)))
          (cond ((or (string= "" selected-tag)
                     (string= done-selection selected-tag))
                 (setq finished t))
                ((not selected-tag)
                 (message "Return is nil"))
                (t
                 (delete selected-tag available-tag-list)
                 (add-to-list 'selected-tag-list selected-tag t)))))
      selected-tag-list)))
#+end_src

** ~org-roam-bibtex~

#+begin_quote
Connector between Org-roam, BibTeX-completion, and Org-ref. -- [[https://github.com/org-roam/org-roam-bibtex][org-roam-bibtex]]
#+end_quote

#+begin_src emacs-lisp
(use-package org-roam-bibtex
  :straight
  (org-roam-bibtex :host github :repo "org-roam/org-roam-bibtex")

  :after
  (org-roam helm-bibtex org-ref)

  :hook
  (org-roam-mode . org-roam-bibtex-mode)

  :init
  (setq org-ref-notes-function 'orb-edit-notes
        orb-preformat-keywords '(("citekey" . "=key=")
                                 "title"
                                 "url"
                                 "file"
                                 "author-or-editor"
                                 "keywords")
        orb-templates `(("r" "ref" plain (function org-roam-capture--get-point)
                         ""
                         :file-name "%<%Y%m%d%H%M%S>-${citekey}"
                         :head
                         ,(concat "#+TITLE: ${title}\n"
                                  "#+ROAM_KEY: ${ref}\n"
                                  "* Notes\n"
                                  ":PROPERTIES:\n"
                                  ":Custom_ID: ${citekey}\n"
                                  ":URL: ${url}\n"
                                  ":AUTHOR: ${author-or-editor}\n"
                                  ":NOTER_DOCUMENT: %(orb-process-file-field \"${citekey}\")\n"
                                  ":END:\n\n")
                         :unnarrowed t)

                        ("w" "webpage" plain (function org-roam-capture--get-point)
                         ""
                         :file-name "%<%Y%m%d%H%M%S>-${slug}"
                         :head
                         ,(concat "#+TITLE: ${title}\n"
                                  "#+ROAM_KEY: ${url}\n\n"
                                  "* Notes\n"
                                  ":PROPERTIES:\n"
                                  ":Custom_ID: ${citekey}\n"
                                  ":URL: ${url}\n"
                                  ":END:\n\n")
                         :unnarrowed t))))
#+end_src

** Application Functions

#+begin_src emacs-lisp :tangle no
(defun medivhok/card-entry-< (entry-a entry-b)
  "Returns ENTRY-A < ENTRY-B."
  (string< (car entry-a) (car entry-b)))

(defun medivhok/note-card-entry-p (card-entry)
  "Check if CARD-ENTRY is a note card."
  (string-match medivhok:notes-directory
                (plist-get (cdr card-entry) :path)))

(defun medivhok/find-note-card ()
  (interactive)
  (org-roam-find-file
   ""
   nil
   (lambda (cards-entries)
     (interactive)
     (sort (seq-filter 'medivhok/note-card-entry-p
                       cards-entries)
           'medivhok/card-entry-<))))

(defun medivhok/annotated-bibliography-card-entry-p (card-entry)
  "Check if CARD-ENTRY is an annotated bibliography card."
  (string-match medivhok:annotated-bibliography-directory
                (plist-get (cdr card-entry) :path)))

(defun medivhok/find-annotated-bibliography-card ()
  (interactive)
  (org-roam-find-file
   ""
   nil
   (lambda (cards-entries)
     (interactive)
     (sort (seq-filter 'medivhok/annotated-bibliography-card-entry-p
                       cards-entries)
           'medivhok/card-entry-<))))

(defun medivhok/glossary-card-entry-p (card-entry)
  "Check if CARD-ENTRY is a glossary card."
  (string-match medivhok:glossaries-directory
                (plist-get (cdr card-entry) :path)))

(defun medivhok/find-glossary-card ()
  (interactive)
  (org-roam-find-file
   ""
   nil
   (lambda (cards-entries)
     (interactive)
     (sort (seq-filter 'medivhok/glossary-card-entry-p
                       cards-entries)
           'medivhok/card-entry-<))))
#+end_src

* You Need A Budget
** ~ledger-mode~

#+begin_quote
Emacs Lisp files for interacting with the C++Ledger accounting system. -- [[https://github.com/ledger/ledger-mode][ledger-mode]]
#+end_quote

#+begin_src emacs-lisp
(use-package ledger-mode
  :defer t)
#+end_src

** ~flycheck-ledger~

#+begin_quote
A flychecker for checking ledger files. -- [[https://github.com/purcell/flycheck-ledger][flycheck-ledger]]
#+end_quote

#+begin_src emacs-lisp
(use-package flycheck-ledger
  :after flycheck)
#+end_src

** ~evil-ledger~

#+begin_quote
More Evil in ledger-mode. -- [[https://github.com/atheriel/evil-ledger][evil-ledger]]
#+end_quote

#+begin_src emacs-lisp
(use-package evil-ledger
  :hook
  (ledger-mode . evil-ledger-mode)

  :general
  (medivhok:local-mode-menu 'normal
    "s" 'evil-ledger-sort))
#+end_src

* Statistics With R

#+begin_src emacs-lisp
(use-package ess
  :defer t)

(use-package ess-R-data-view
  :defer t)

(use-package polymode
  :defer t)

(use-package poly-R
  :defer t)
#+end_src
