#+TITLE: Bootstrapping
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle ../bootstrapping/init.el :mkdirp yes
#+OPTIONS: H:2 toc:nil

#+TOC: headlines:2

* Table of Contents  :noexport:
:PROPERTIES:
:TOC:      :include all :depth 2 :ignore (this)
:END:
:CONTENTS:
- [[#profiling][Profiling]]
- [[#cache-directory][Cache Directory]]
- [[#packages-management][Packages Management]]
  - [[#straightel][straight.el]]
  - [[#use-package][use-package]]
- [[#personalization][Personalization]]
  - [[#personnal-infos][Personnal Infos]]
  - [[#directory-structure][Directory Structure]]
:END:

* Profiling

Make startup faster by reducing the frequency of garbage collection and then use
a hook to measure Emacs startup time.

The default is 800k (mesured in bytes).

#+begin_src emacs-lisp
(setq gc-cons-threshold (* 50 1000 1000))
#+end_src

Profile emacs startup.

#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src

* Cache Directory

To keep our config directory clean, we are gonna use another directory
for our cache. I donâ€™t want a bunch of transient files showing up as
untracked in the Git repository.

#+begin_src emacs-lisp
(setq user-emacs-directory "~/.cache/emacs/"
      backup-directory-alist `(("." . ,(expand-file-name "backups"
                                                         user-emacs-directory)))
      url-history-file (expand-file-name "url/history" user-emacs-directory)
      auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-"
                                                   user-emacs-directory)
      projectile-known-projects-file (expand-file-name
                                      "projectile-bookmarks.eld"
                                      user-emacs-directory))

;; Keep customization settings in a temporary file (thanks Ambrevar!).
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
        (expand-file-name (format "emacs-custom-%s.el" (user-uid))
                          temporary-file-directory)))
(load custom-file t)
#+end_src

* Packages Management

And finally, we need to be able to download, install and load
packages. For the download and the installation, [[https://github.com/raxod502/straight.el][straight.el]]
will be used, and for the loading, [[https://github.com/jwiegley/use-package][use-package]] is gonna be the
choosen one.

** ~straight.el~

Packages need to be installed first (if not already installed), and loaded
before we can use them.

To install them, [[https://github.com/raxod502/straight.el][straight.el]], the next-generation, purely functional
package manager for the Emacs hacker is used and to load them, [[https://github.com/jwiegley/use-package][use-package]] is
used and integrated to straight.

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el"
                         user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

** ~use-package~

Using straight, we can now download, install and load /use-package/.

#+begin_src emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
(setq use-package-verbose t)
#+end_src

* Personalization
** Personnal Infos
*** ~user-full-name~

#+begin_src emacs-lisp
(setq user-full-name "Jean Gregory Verret")
#+end_src

*** ~user-mail-address~

#+begin_src emacs-lisp
(setq user-mail-address "gregory.verret@gmail.com")
#+end_src

** Directory Structure
*** ~medivhok:app-directory~

#+begin_src emacs-lisp
(setq medivhok:app-directory (file-name-as-directory "~/org"))
#+end_src

*** ~medivhok:agenda-directory~

#+begin_src emacs-lisp
(setq medivhok:agenda-directory
      (file-name-as-directory
       (expand-file-name "agenda"
                         medivhok:app-directory)))
#+end_src

*** ~medivhok:budget-directory~

#+begin_src emacs-lisp
(setq medivhok:budget-directory
      (file-name-as-directory
       (expand-file-name "budget"
                         medivhok:app-directory)))
#+end_src

*** ~medivhok:slip-box-directory~

#+begin_src emacs-lisp
(setq medivhok:slip-box-directory
      (file-name-as-directory
       (expand-file-name "roam"
                         medivhok:app-directory)))
#+end_src
